@page "/"
@page "/flight-display"

@using System.Net.Http.Json
@using System.Text.Json
@using Airport.DisplayWeb.Data
@using Microsoft.AspNetCore.SignalR.Client;
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<PageTitle>Flight Information Display</PageTitle>

@code {
    private List<FlightInfo> flights = new List<FlightInfo>();
    private HubConnection? hubConnection;
    private string currentTime = DateTime.Now.ToString("HH:mm:ss - dd MMMM yyyy");
    private IJSObjectReference? jsModule;

    private string GetStatusDisplay(string status) => status switch
    {
        "Registering" => "Check-in",
        "Boarding" => "Boarding",
        "Departed" => "Departed",
        "Delayed" => "Delayed",
        "Cancelled" => "Cancelled",
        _ => status
    };

    private string GetStatusClass(string status) => status switch
    {
        "Registering" => "status-registering", // Fixed: was status-checkingin in CSS
        "Boarding" => "status-boarding",
        "Departed" => "status-departed", // Fixed: was status-on-time
        "Delayed" => "status-delayed",
        "Cancelled" => "status-cancelled",
        _ => "status-unknown"
    };

    private string DefaultText => "-";

    protected override async Task OnInitializedAsync()
    {
        // Load flights
        try
        {
            flights = await Http.GetFromJsonAsync<List<FlightInfo>>("http://localhost:5208/api/flights") ?? new List<FlightInfo>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Flights татахад алдаа: {ex.Message}");
            flights = new List<FlightInfo>();
        }

        // SignalR Hub connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5208/statushub")
            .WithAutomaticReconnect()
            .Build();

        // Fixed: Handle the anonymous object format sent by server
        hubConnection.On("ReceiveFlightUpdate", (object updatedFlightData) =>
        {
            try
            {
                // Convert the anonymous object to our FlightInfo type
                var json = System.Text.Json.JsonSerializer.Serialize(updatedFlightData);
                var updatedFlight = System.Text.Json.JsonSerializer.Deserialize<FlightInfo>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (updatedFlight != null)
                {
                    var index = flights.FindIndex(f => f.FlightNumber == updatedFlight.FlightNumber);
                    if (index != -1)
                    {
                        flights[index] = updatedFlight;
                    }
                    else
                    {
                        flights.Add(updatedFlight);
                    }
                    InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"SignalR update error: {ex.Message}");
            }
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // JavaScript timer ehluuleh
            await JSRuntime.InvokeVoidAsync("startClock", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task UpdateTime()
    {
        currentTime = DateTime.Now.ToString("HH:mm:ss - dd MMMM yyyy");
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }

        // Stop the JavaScript timer
        await JSRuntime.InvokeVoidAsync("stopClock");
    }
}

<div class="flight-display-container">
    <div class="display-header">
        <h1>✈️ FLIGHT INFORMATION</h1>
        <div class="current-time">
            @currentTime
        </div>
    </div>

    <div class="flights-board">
        <div class="flight-header">
            <div class="header-cell">FLIGHT</div>
            <div class="header-cell">ROUTE</div>
            <div class="header-cell">DEPARTURE</div>
            <div class="header-cell">ARRIVAL</div>
            <div class="header-cell">AIRCRAFT</div>
            <div class="header-cell">STATUS</div>
        </div>

        @if (flights == null || flights.Count == 0)
        {
            <div class="loading-message">
                <div class="loading-spinner"></div>
                <p>Loading flight information...</p>
            </div>
        }
        else
        {
            @foreach (var flight in flights)
            {
                <div class="flight-row @GetStatusClass(flight.Status)">
                    <div class="flight-cell flight-number">
                        @flight.FlightNumber
                    </div>
                    <div class="flight-cell route">
                        <span class="origin">ULN</span>
                        <span class="arrow">→</span>
                        <span class="destination">@DefaultText</span>
                    </div>
                    <div class="flight-cell time">
                        @flight.DepartureTime.ToString("HH:mm")
                    </div>
                    <div class="flight-cell time">@DefaultText</div>
                    <div class="flight-cell aircraft">@DefaultText</div>
                    <div class="flight-cell status">
                        <span class="status-badge @GetStatusClass(flight.Status)">
                            @GetStatusDisplay(flight.Status)
                        </span>
                    </div>
                </div>
            }
        }
    </div>
</div>

<script>
    let clockInterval;
    let dotNetHelper;

    window.startClock = (dotNetObjectReference) => {
        dotNetHelper = dotNetObjectReference;
        clockInterval = setInterval(() => {
            dotNetHelper.invokeMethodAsync('UpdateTime');
        }, 1000);
    };

    window.stopClock = () => {
        if (clockInterval) {
            clearInterval(clockInterval);
        }
    };
</script>