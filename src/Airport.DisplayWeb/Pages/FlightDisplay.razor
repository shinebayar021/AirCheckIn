@page "/flight-display"

@using System.Net.Http.Json
@using Airport.DisplayWeb.Data
@using Microsoft.AspNetCore.SignalR.Client;
@implements IAsyncDisposable

@inject HttpClient Http

<PageTitle>Flight Information Display</PageTitle>

@code {
    private List<FlightInfo> flights = new List<FlightInfo>();
    private HubConnection? hubConnection;

    private string GetStatusDisplay(string status) => status switch
    {
        "Registering" => "Registering",
        "Boarding" => "Boarding",
        "Departed" => "Departed",
        "Delayed" => "Delayed",
        "Cancelled" => "Cancelled",
        _ => status
    };

    private string GetStatusClass(string status) => status switch
    {
        "Registering" => "status-registering",
        "Boarding" => "status-boarding",
        "Departed" => "status-on-time",
        "Delayed" => "status-delayed",
        "Cancelled" => "status-cancelled",
        _ => "status-unknown"
    };

    private string DefaultText => "-";

    protected override async Task OnInitializedAsync()
    {
        // Анх API-аас flight-уудыг татах
        try
        {
            flights = await Http.GetFromJsonAsync<List<FlightInfo>>("http://localhost:5208/api/flights") ?? new List<FlightInfo>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Flights татахад алдаа: {ex.Message}");
            flights = new List<FlightInfo>();
        }

        // SignalR Hub-д холбогдох
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5208/seatshub")  // Таны SignalR Hub URL
            .WithAutomaticReconnect()
            .Build();

        // Flight статус шинэчлэгдсэн event-г хүлээж авах
        hubConnection.On<FlightInfo>("ReceiveFlightUpdate", (updatedFlight) =>
        {
            // Жагсаалтыг шинэчлэх
            var index = flights.FindIndex(f => f.FlightNumber == updatedFlight.FlightNumber);
            if (index != -1)
            {
                flights[index] = updatedFlight;
            }
            else
            {
                flights.Add(updatedFlight);
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    // Компонент хаагдах үед холболтыг салгах
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<div class="flight-display-container">
    <div class="display-header">
        <h1>✈️ FLIGHT INFORMATION</h1>
        <div class="current-time">
            @DateTime.Now.ToString("HH:mm:ss - dd MMMM yyyy")
        </div>
    </div>

    <div class="flights-board">
        <div class="flight-header">
            <div class="header-cell">FLIGHT</div>
            <div class="header-cell">ROUTE</div>
            <div class="header-cell">DEPARTURE</div>
            <div class="header-cell">ARRIVAL</div>
            <div class="header-cell">AIRCRAFT</div>
            <div class="header-cell">STATUS</div>
        </div>

        @* Хэрвээ жагсаалт хоосон бол "-" маягаар харуулна *@
        @if (flights == null || flights.Count == 0)
        {
            <div class="flight-row status-unknown">
                <div class="flight-cell flight-number">—</div>
                <div class="flight-cell route">@DefaultText</div>
                <div class="flight-cell time">@DefaultText</div>
                <div class="flight-cell time">@DefaultText</div>
                <div class="flight-cell aircraft">@DefaultText</div>
                <div class="flight-cell status">
                    <span class="status-badge status-unknown">No Data</span>
                </div>
            </div>
        }
        else
        {
            @foreach (var flight in flights)
            {
                <div class="flight-row @GetStatusClass(flight.Status)">
                    <!-- Flight number -->
                    <div class="flight-cell flight-number">
                        @flight.FlightNumber
                    </div>

                    <!-- ROUTE: JSON-д байхгүй тул "-" эсвэл та өөрийн логик оруулна -->
                    <div class="flight-cell route">
                        <span class="origin">@DefaultText</span>
                        <span class="arrow">→</span>
                        <span class="destination">@DefaultText</span>
                    </div>

                    <!-- DEPARTURE: JSON-д ирж буй departureTime -->
                    <div class="flight-cell time">
                        @flight.DepartureTime.ToString("HH:mm")
                    </div>

                    <!-- ARRIVAL: JSON-д ирэхгүй тул "-" эсвэл өөр логик -->
                    <div class="flight-cell time">@DefaultText</div>

                    <!-- AIRCRAFT: JSON-д ирэхгүй тул "-" эсвэл өөр логик -->
                    <div class="flight-cell aircraft">@DefaultText</div>

                    <!-- STATUS: JSON-д ирж буй status -->
                    <div class="flight-cell status">
                        <span class="status-badge @GetStatusClass(flight.Status)">
                            @GetStatusDisplay(flight.Status)
                        </span>
                    </div>
                </div>
            }
        }
    </div>
</div>

<style>
    /* Энгийн жишээ CSS */
    .flight-display-container {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    .display-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

        .display-header h1 {
            margin: 0;
            font-size: 24px;
        }

    .current-time {
        font-size: 14px;
        color: #555;
    }

    .flights-board {
        border: 1px solid #ddd;
        border-radius: 4px;
        overflow: hidden;
    }

    .flight-header,
    .flight-row {
        display: grid;
        grid-template-columns: 1fr 2fr 1fr 1fr 2fr 1fr;
        padding: 8px 12px;
        align-items: center;
    }

    .flight-header {
        background-color: #f2f2f2;
        font-weight: bold;
    }

    .header-cell,
    .flight-cell {
        padding: 4px;
    }

    .flight-number {
        font-weight: 600;
    }

    .route .origin,
    .route .destination {
        display: inline-block;
        width: 30px;
        text-align: center;
    }

    .route .arrow {
        display: inline-block;
        width: 10px;
        text-align: center;
    }

    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 13px;
        font-weight: 500;
        color: white;
    }

    /* Статус бүрд тусгай өнгө өгөх */
    .status-registering {
        background-color: #ffc107; /* шар өнгө */
    }

    .status-boarding {
        background-color: #007bff; /* цэнхэр */
    }

    .status-on-time {
        background-color: #28a745; /* ногоон */
    }

    .status-delayed {
        background-color: #dc3545; /* улаан */
    }

    .status-cancelled {
        background-color: #6c757d; /* саарал */
    }

    .status-unknown {
        background-color: #6c757d; /* саарал */
    }

    /* Flight row-ын фонгийн өнгө өгч мөн ялгах боломжтой */
    .flight-row.status-registering {
        background-color: rgba(255, 193, 7, 0.1);
    }

    .flight-row.status-boarding {
        background-color: rgba(0, 123, 255, 0.1);
    }

    .flight-row.status-on-time {
        background-color: rgba(40, 167, 69, 0.1);
    }

    .flight-row.status-delayed {
        background-color: rgba(220, 53, 69, 0.1);
    }

    .flight-row.status-cancelled {
        background-color: rgba(108, 117, 125, 0.1);
    }

    .flight-row.status-unknown {
        background-color: rgba(108, 117, 125, 0.1);
    }
</style>
